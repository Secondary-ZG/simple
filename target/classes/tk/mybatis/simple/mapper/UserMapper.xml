<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id" />
        <result property="userName" column="user_name" />
        <result property="userPassword" column="user_password" />
        <result property="userEmail" column="user_email" />
        <result property="userInfo" column="user_info" />
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP" />
    </resultMap>
    
    <select id="selectById" resultMap="userMap">
        SELECT
            su.id, su.user_name AS userName,
            su.user_password AS userPassword,
            su.user_email AS userEmail,
            su.user_info AS userInfo,
            su.head_img AS headImg,
            su.create_time AS createTime
        FROM
            sys_user su
        WHERE su.id = #{id}
    </select>

    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            su.id, su.user_name AS userName,
            su.user_password AS userPassword,
            su.user_email AS userEmail,
            su.user_info AS userInfo,
            su.head_img AS headImg,
            su.create_time AS createTime
        FROM
            sys_user su
    </select>

    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            sr.id, sr.role_name AS roleName,
            sr.enabled, sr.create_by AS createBy,
            sr.create_time AS createTime,
            su.user_name AS userName,
            su.user_email AS userEmail
        FROM sys_user su
        JOIN sys_user_role sur ON sur.user_id = su.id
        JOIN sys_role sr ON sr.id = sur.role_id
        WHERE su.id = #{userId}
    </select>

     <!-- 参数详解
     1、flushCache: 默认值为true，任何时候只要语句被调用，都会清空一级缓存和二级缓存
     2、timeout: 设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数
     3、statementType: 对于STATEMENT、PREPARED、CALLABLE，MyBatis会分别使用对应的
                       Statement, PreparedStatement、CallableStatement，默认值为
                       PREPARED
     4、useGeneratedKeys: 默认值为false。如果设置为true，MyBatis会使用JDBC的getGeneratedKeys
                         的方法来取出由数据库内部生成的主键
     5、keyProperty: MyBatis通过getGeneratedKeys获取的主键值后将要赋值的属性名。如果希望得到多个
                    数据库自动生成的列，属性值也可以是以逗号分隔的属性名称列表
     6、keyColumn: 仅对INSERT和UPDATE有用。通过生成的键值设置表中的列名，这个设置仅在某些数据库中是
                  （PostgreSQL）必须的，当主键列不是表中的第一列时需要设置，如果希望得到多个生成的列，
                   也可以是逗号分隔的属性名称列表
     7、databaseId: 如果配置了databaseIdProvider，MyBatis会加载所有的不带databaseId的或匹配当前
                    databaseId的语句。如果同时存在带databaseId的不带databaseId的语句，后者会被忽略-->
    <insert id="insert">
        INSERT INTO
            sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword},#{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword},#{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insert3">
        INSERT INTO
            sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword},#{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP}
        )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSRT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        UPDATE sys_user
        SET user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg, jdbcType = BLOB},
            create_time = #{createTime, jdbcType = TIMESTAMP}
        WHERE id = #{id}
    </update>
    
    <delete id="deleteById">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            sr.id, sr.role_name AS roleName, sr.enabled,
            sr.create_by AS createBy, sr.create_time AS createTime
        FROM
            sys_user su
        INNER JOIN sys_user_role sur ON sur.user_id = su.id
        INNER JOIN sys_role sr ON sr.id = sur.role_id
        WHERE su.id = #{userId} AND sr.enabled = #{enabled}
    </select>
    
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            su.id, su.user_name AS userName,
            su.user_password AS userPassword,
            su.user_email AS userEmail,
            su.user_info AS userInfo,
            su.head_img AS headImg,
            su.create_time AS createTime
        FROM
            sys_user su
        WHERE 1 = 1
              <if test="userName != null and userName != ''">
                AND su.user_name LIKE concat('%', #{userName}, '%')
              </if>
              <if test="userEmail != null and userEmail != ''">
                AND su.user_email = #{userEmail}
              </if>
    </select>

    <update id="updateByIdSelective">
        UPDATE sys_user
        SET
          <if test="userName != null and userName != ''">
              user_name = #{userName},
          </if>
          <if test="userPassword != null and userPassword != ''">
              user_password = #{userPassword},
          </if>
          <if test="userEmail != null and userEmail != ''">
              user_email = #{userEmail},
          </if>
          <if test="userInfo != null and userInfo != ''">
              user_info = #{userInfo},
          </if>
          <if test="headImg != null">
              head_img = #{headImg, jdbcType = BLOB},
          </if>
          <if test="createTime != null">
              create_time = #{createTime. jdbcType = TIMSTAMP},
          </if>
          id = #{id}
        WHERE id = #{id}
    </update>

    <insert id="insert2Selective" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
            sys_user(user_name, user_password,
                     <if test="userEmail != null and userEmail != ''">
                         user_email,
                     </if>
                     user_info, head_img, create_time)
        VALUES (#{userName}, #{userPassword},
                <if test="userEmail != null and userEmail != ''">
                    #{userEmail},
                </if>
                #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>
    
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            id, user_name AS userName,
            user_email AS userEmail,
            user_password AS userPassword,
            user_info AS userInfo,
            head_img AS headImg,
            create_time AS createTime
        FROM
            sys_user
        WHERE 1 = 1
        <choose>
            <when test="id != null">
                AND id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                AND user_name = #{userName}
            </when>
            <otherwise>
                AND 1 = 2
            </otherwise>
        </choose>
    </select>
</mapper>